1) https://www.geeksforgeeks.org/binary-search/ <br/>
2) Search an element in sorted but rotated array: https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/ <br/>
//iterative approach:
class Boot {

    /* Searches an element key in a
    pivoted sorted array arr[]
    of size n */
    static int pivotedBinarySearch(int arr[], int n, int key)
    {
        int pivot = findPivot(arr, 0, n - 1);

        // If we didn't find a pivot, then
        // array is not rotated at all
        if (pivot == -1)
            return binarySearch(arr, 0, n - 1, key);

        // If we found a pivot, then first
        // compare with pivot and then
        // search in two subarrays around pivot
        if (arr[pivot] == key)
            return pivot;
        if (arr[0] <= key)
            return binarySearch(arr, 0, pivot - 1, key);
        return binarySearch(arr, pivot + 1, n - 1, key);

    }

    /* Function to get pivot. For array
    3, 4, 5, 6, 1, 2 it returns
    3 (index of 6) */
    static int findPivot(int arr[], int low, int high)
    {
        while(low<=high) {

            int mid = low + (high - low) / 2;
            if (mid < high && arr[mid] > arr[mid + 1])
                return mid;
            else if (mid > low && arr[mid] < arr[mid - 1])
                return (mid - 1);
            else if (arr[low] >= arr[mid])
                high = mid - 1;
            else
                low = mid + 1;
        }
        return -1;
    }

    /* Standard Binary Search function */
    static int binarySearch(int arr[], int low, int high, int key)
    {
        while(low<=high) {
            int mid = low + (high-low) / 2;
            if (key == arr[mid])
                return mid;
            else if (key > arr[mid])
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
    }

    // main function
    public static void main(String args[])
    {
        //             0  1  2  3  4  5   6  7  8
        int arr1[] = { 5, 6, 7, 8, 9, 10, 1, 2, 3 };
        int n = arr1.length;
        int key = 1;
        System.out.println("Index of the element is : "
                + pivotedBinarySearch(arr1, n, key));
    }
}


//Aliter:
public class SearchElementInSortedAndRotatedArray {
 
    public static void main(String[] args) {
        int arr[]={16,19,21,25,3,5,8,10}; //or simply arr = 3,4,5,1,2. see its sorted but rotated. 
        int elementToFind = 5;
        System.out.println("Index of element 5: "+ findElementRotatedSortedArray(arr,0,arr.length-1,elementToFind));
    }
    
    public static int findElementRotatedSortedArray(int[] arr,int low,int high,int elementToFind)
    {
        int mid=0;
        while(low<=high)
        {
            mid=low + ((high - low) / 2);
 
            if(arr[mid] == elementToFind)
            {
                return mid;
            }
            if(arr[mid]<=arr[high])
            {
                // Right part is sorted
                if(elementToFind > arr[mid] && elementToFind <=arr[high])
                {
                    low=mid+1;
                }
                else
                {
                    high=mid-1;
                }
            }
            else
            {
                // Left part is sorted
                if(arr[low] <= elementToFind && elementToFind < arr[mid])
                {
                    high=mid-1;
                }
                else
                {
                    low=mid+1;
                }
            }
        }
        return -1;
    }
}

3) Search minimum in sorted but rotated array: https://www.interviewbit.com/problems/rotated-array/ <br/>
4) Find the index of an element in sorted array. If not found, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.

Here are few examples. <br/>

[1,3,5,6], 5 → 2 <br/>
[1,3,5,6], 2 → 1 <br/>
[1,3,5,6], 7 → 4 <br/>
[1,3,5,6], 0 → 0 <br/>

https://github.com/shreya367/InterviewBit/blob/master/Binary%20Search/Sorted%20Insert%20Position <br/>
