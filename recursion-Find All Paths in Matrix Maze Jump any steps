import javafx.util.Pair;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
/*
 * |(0,0)  (0,1)  (0,2) |
 * |(1,0)  (1,1)  (1,2) |
 * |(2,0)  (2,1)  (2,2) |
 * find all paths from 0,0 to destX and destY given that you can move any steps to the right or any steps to the downwards or any steps diagonally.
 * */
class Boot {

    public static void main(String args[])
    {
        int srcX = 0, srcY = 0, destX = 2, destY = 2;
        System.out.println("Paths found: " + countPathsInMaze(srcX,srcY, destX,destY));
        List<String> allPaths = getAllPathsInMaze(srcX,srcY, destX, destY);
        System.out.println(allPaths.size() + " paths are: " + allPaths);

        getAllPathsInMaze_Optimized(srcX, srcY, destX, destY, "");
    }

    //only downwards and right steps are allowed.
    public static int countPathsInMaze(int sourceX, int sourceY, int targetX, int targetY){

        if(sourceX == targetX && sourceY == targetY){
            return 1;
        }

        int total = 0;
        for(int i=1; i<=targetX; i++){  //max how many times we can move down...
            if(sourceX < targetX){
                int countVerticalPaths = countPathsInMaze(sourceX+i, sourceY, targetX, targetY);  //taking steps downwards.
                total+=countVerticalPaths;
            }
        }

        for(int i=1; i<=targetY; i++) {   //max how many times we can move right...
            if (sourceY < targetY) {
                int countHorizontalPaths = countPathsInMaze(sourceX, sourceY+i, targetX, targetY);  //taking steps downwards.
                total+=countHorizontalPaths;
            }
        }

        for(int i=1; i<=targetX && i<=targetY; i++) { //max how many times we can move diagonally...
            if (sourceX < targetX && sourceY < targetY) {
                int countDiagonalPaths = countPathsInMaze(sourceX+i, sourceY+i, targetX, targetY);  //taking steps downwards.
                total+=countDiagonalPaths;
            }
        }

        return total;
    }

    public static List<String> getAllPathsInMaze(int sourceX, int sourceY, int targetX, int targetY){

        if(sourceX == targetX && sourceY == targetY){
            return Collections.singletonList("");
        }

        List<String> temp = new ArrayList<>();

        for(int i=1; i<=targetX; i++){  //max how many times we can move down...
            if(sourceX < targetX){
                List<String> verticalPaths = getAllPathsInMaze(sourceX+i, sourceY, targetX, targetY);  //taking steps downwards.
                for(String item : verticalPaths){
                    temp.add("v" + i + item);
                }
            }
        }

        for(int i=1; i<=targetY; i++) {   //max how many times we can move right...
            if (sourceY < targetY) {
                List<String> horizontalPaths = getAllPathsInMaze(sourceX, sourceY + i, targetX, targetY);  //taking steps right.
                for(String item : horizontalPaths){
                    temp.add("h" + i + item);
                }
            }
        }

        for(int i=1; i<=targetX && i<=targetY; i++) { //max how many times we can move diagonally...
            if (sourceX < targetX && sourceY < targetY) {
                List<String> horizontalPaths = getAllPathsInMaze(sourceX+i, sourceY + i, targetX, targetY);  //taking steps diagonally.
                for(String item : horizontalPaths){
                    temp.add("d" + i + item);
                }
            }
        }

        return temp;
    }

    public static void getAllPathsInMaze_Optimized(int sourceX, int sourceY, int targetX, int targetY, String ans){

        if(sourceX == targetX && sourceY == targetY){
            System.out.println(ans);
            return;
        }

        List<String> temp = new ArrayList<>();

        for(int i=1; i<=targetX; i++){  //max how many times we can move down...
            if(sourceX < targetX){
                getAllPathsInMaze_Optimized(sourceX+i, sourceY, targetX, targetY, ans+"v"+i);  //taking steps downwards.
            }
        }

        for(int i=1; i<=targetY; i++) {   //max how many times we can move right...
            if (sourceY < targetY) {
                getAllPathsInMaze_Optimized(sourceX, sourceY + i, targetX, targetY, ans+"h"+i);  //taking steps right.
            }
        }

        for(int i=1; i<=targetX && i<=targetY; i++) { //max how many times we can move diagonally...
            if (sourceX < targetX && sourceY < targetY) {
                getAllPathsInMaze_Optimized(sourceX+i, sourceY + i, targetX, targetY, ans  +"d" + i);  //taking steps diagonally.
            }
        }
    }
}
