import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

class Boot {

    public static void main(String args[])
    {
        int no = 5; //Nth stair to climb
        int steps[] = new int[] {1,4}; //number of steps allowed each time.

        List<String> paths = climbNStairs_AllPaths(no, steps); //climb N stairs using only array steps at a time.
        int n = climbNStairs(no, steps);
        System.out.println(paths.size() + " paths found to go to " + no + "th stair.");
        System.out.println(n + " paths are: ");
        paths.stream().forEach(System.out::println);
    }

    public static int climbNStairs(int n, int arr[]){

        if(n == 0){
            return 1;
        }

        int total = 0;
        for(int item: arr){
            if(n-item>=0){
                total+=climbNStairs(n-item, arr);
            }
        }
        return total;
    }


    public static List<String> climbNStairs_AllPaths(int n, int arr[]){

        if(n == 0){
            return Collections.singletonList("");
        }

        String ch = n + "";

        List<String> temp = new ArrayList<>();
        for(int item: arr) {
            if(n-item >= 0){
                List<String> prevPaths = climbNStairs_AllPaths(n-item, arr);
                prevPaths = prevPaths.stream().map(e -> item + e).collect(Collectors.toList());
                temp.addAll(prevPaths);
            }
        }
        return temp;
    }
}
/* {1,2} are allowed then, n= 0 --> 1, 1 ---> 1,  2---> 2,  3---> 3,  4---> 1111,112,121,211,22
{1,2,3} are allowed steps then, n= 0 --> 1, 1 ---> 1,  2---> 2,  3---> 4,  4---> 1111,112,121,211,13,31,22
{1,3} are allowed, then n=0 -->1, 1 --> 1, 2 --> 2, 3 --> 2, 4--> 3, 5--> 4

 */
